--- drivers/block/zram/zram_drv.c
+++ drivers/block/zram/zram_drv.c
@@ -60,23 +60,6 @@ static void zram_free_page(struct zram *zram, size_t index);
 static int zram_read_from_zspool(struct zram *zram, struct page *page,
 				 u32 index);
 
-#ifdef CONFIG_ZRAM_MULTI_COMP
-u8 __read_mostly sysctl_zram_recomp_immediate = 1;
-
-static const struct ctl_table zram_sysctl_table[] = {
-	{
-		.procname	= "zram_recomp_immediate",
-		.data		= &sysctl_zram_recomp_immediate,
-		.maxlen		= sizeof(u8),
-		.mode		= 0644,
-		.proc_handler	= proc_dou8vec_minmax,
-		.extra1		= SYSCTL_ZERO,
-		.extra2		= SYSCTL_THREE,
-	},
-};
-static struct ctl_table_header *zram_sysctl_table_header;
-#endif //CONFIG_ZRAM_MULTI_COMP
-
 #define slot_dep_map(zram, index) (&(zram)->table[(index)].dep_map)
 
 static void zram_slot_lock_init(struct zram *zram, u32 index)
@@ -1744,13 +1726,9 @@ static int zram_write_page(struct zram *zram, struct page *page, u32 index)
 	unsigned long handle;
 	unsigned int comp_len;
 	void *mem;
-	struct zcomp_strm *zstrm = NULL;
+	struct zcomp_strm *zstrm;
 	unsigned long element;
 	bool same_filled;
-	u8 prio, prio_max = zram->num_active_comps;
-#ifdef CONFIG_ZRAM_MULTI_COMP
-	prio_max = min(prio_max, sysctl_zram_recomp_immediate + 1);
-#endif //CONFIG_ZRAM_MULTI_COMP
 
 	/* First, free memory allocated to this slot (if any) */
 	zram_slot_lock(zram, index);
@@ -1763,68 +1741,49 @@ static int zram_write_page(struct zram *zram, struct page *page, u32 index)
 	if (same_filled)
 		return write_same_filled_page(zram, element, index);
 
-	for (prio = ZRAM_PRIMARY_COMP; prio < prio_max; prio++) {
-		if (!zram->comps[prio])
-			continue;
-
-		zstrm = zcomp_stream_get(zram->comps[prio]);
-		mem = kmap_local_page(page);
-		ret = zcomp_compress(zram->comps[prio], zstrm,
-				     mem, &comp_len);
-		kunmap_local(mem);
-
-		if (unlikely(ret)) {
-			pr_err("Compression failed! err=%d\n", ret);
-			goto out;
-		}
-
-		if (comp_len < huge_class_size)
-			break;
+	zstrm = zcomp_stream_get(zram->comps[ZRAM_PRIMARY_COMP]);
+	mem = kmap_local_page(page);
+	ret = zcomp_compress(zram->comps[ZRAM_PRIMARY_COMP], zstrm,
+			     mem, &comp_len);
+	kunmap_local(mem);
 
+	if (unlikely(ret)) {
 		zcomp_stream_put(zstrm);
-		zstrm = NULL;
+		pr_err("Compression failed! err=%d\n", ret);
+		return ret;
 	}
 
-	if (!zstrm) {
-		if (prio >= zram->num_active_comps) {
-			zram_slot_lock(zram, index);
-			zram_set_flag(zram, index, ZRAM_INCOMPRESSIBLE);
-			zram_slot_unlock(zram, index);
-		}
-
-		ret = write_incompressible_page(zram, page, index, prio - 1);
-		goto out;
+	if (comp_len >= huge_class_size) {
+		zcomp_stream_put(zstrm);
+		return write_incompressible_page(zram, page, index);
 	}
 
 	handle = zs_malloc(zram->mem_pool, comp_len,
 			   GFP_NOIO | __GFP_NOWARN |
 			   __GFP_HIGHMEM | __GFP_MOVABLE);
 	if (IS_ERR_VALUE(handle)) {
-		ret = PTR_ERR((void *)handle);
-		goto out;
+		zcomp_stream_put(zstrm);
+		return PTR_ERR((void *)handle);
 	}
 
 	if (!zram_can_store_page(zram)) {
+		zcomp_stream_put(zstrm);
 		zs_free(zram->mem_pool, handle);
-		ret = -ENOMEM;
-		goto out;
+		return -ENOMEM;
 	}
 
 	zs_obj_write(zram->mem_pool, handle, zstrm->buffer, comp_len);
+	zcomp_stream_put(zstrm);
 
 	zram_slot_lock(zram, index);
 	zram_set_handle(zram, index, handle);
 	zram_set_obj_size(zram, index, comp_len);
-	zram_set_priority(zram, index, prio);
 	zram_slot_unlock(zram, index);
 
 	/* Update stats */
 	atomic64_inc(&zram->stats.pages_stored);
 	atomic64_add(comp_len, &zram->stats.compr_data_size);
 
-out:
-	if (zstrm)
-		zcomp_stream_put(zstrm);
 	return ret;
 }
 
